import java.util.* ;
import java.io.*; 
public class Solution {
	
	public static ArrayList < Integer > dijkstra(ArrayList< ArrayList < Integer > > vec, int vertices, int edges, int source){
		// Write your code here.

		ArrayList<ArrayList<int[]>> graph  = new ArrayList<>();
		for  (int i=0; i <vertices; i++)
		{
			graph.add(new ArrayList<>());

		}
		// populate the grpah with edges from vec

		for (ArrayList<Integer> edge : vec)
		{
			int u = edge.get(0);
			int v = edge.get(1);
			int w = edge.get(2);

			graph.get(u).add(new int[] {v,w});
			graph.get(v).add(new int[] {u,w});
	
		}

		int [] distances  = new int [vertices];
		Arrays.fill(distances, Integer.MAX_VALUE);
		distances[source]=0;


		PriorityQueue<int[]> pq = new PriorityQueue<>((a,b)->a[1] -b[1]);
		pq.add(new int [] {source, 0});

		while(!pq.isEmpty())
		{
			int [] current = pq.poll();
			int currentNode = current[0];
			int currentDistance = current[1];

			if(currentDistance > distances[currentNode])
			{
				continue;
			}

			for(int [] neighbor : graph.get(currentNode))
			{
				int adjacentNode = neighbor[0];
				int edgeWeight = neighbor[1];

				int newDistance  = distances[currentNode] + edgeWeight;

				// if Shroter then update inthe dustance array

				if(newDistance < distances[adjacentNode])
				{
					distances[adjacentNode] = newDistance;
					pq.add(new int [] {adjacentNode, newDistance});
				}
			}

		}

		// convert array to Arrylist

		ArrayList<Integer> result = new ArrayList<>();
		for (int distance : distances)
		{
		   result.add(distance);
		}

		return result;

	}
} 
