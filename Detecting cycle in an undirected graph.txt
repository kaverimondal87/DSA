import java.util.*;
public class Solution {
    
    public static String cycleDetection(int[][] edges, int n, int m) {




       List<List<Integer>> adjList = new ArrayList<>();


       for (int i =0; i<=n;i++)
       {
          adjList.add(new ArrayList<>());
       }




       for (int i =0; i< m; i++)
       {
           int src = edges[i][0];
           int dest = edges[i][1];


           adjList.get(src).add(dest);
            adjList.get(dest).add(src);
       }




       boolean [] visited = new boolean[n+1];


       for (int i =1; i<= n ; i++)
       {
           if (!visited[i])
           {
                if(dfs(i,-1, visited, adjList)) 
                {
                    return "Yes";
                }
           }
       }


       return "No";
    }




    private static boolean dfs(int node, int parent, boolean [] visited, List<List<Integer>> adjList)
    {
        visited[node] = true;  // visited


        for (int neighbour : adjList.get(node))
        {
            if(!visited[neighbour])
            {
                if(dfs(neighbour, node, visited, adjList))
                {
                    return true;
                }
            }
            else  if(neighbour != parent){
                return true;
            }
        }


        return false;
    }




 /**


 */


}
